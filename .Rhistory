}
}
// priors including constants
target += lprior;
target += std_normal_lpdf(z_1[1]);
}
generated quantities {
// actual population-level intercept
real b_Intercept = Intercept - dot_product(means_X, b);
vector[N] log_lik;
vector[N] mu = rep_vector(0.0, N);
mu += Intercept + Xc * b;
for (n in 1:N) {
// add more terms to the linear predictor
mu[n] += v[J_1[n]] * Z_1_1[n];
}
mu=exp(mu);
for (n in 1:N) {
// special treatment of censored data
if (cens[n] == 0) {
log_lik[n] = loglogistic_lpdf(Y[n] | mu[n], shape);
} else if (cens[n] == 1) {
log_lik[n] = log(1-loglogistic_cdf(Y[n] | mu[n], shape));
}
}
}
"
base::cat(crayon::red("Compiling Stan program...\n"))
ll_normal_model <- rstan::stan_model(model_code = ll_normal)
base::cat(red("Start sampling \n"))
x <- rstan::sampling(ll_normal_model,
data=sdat,
iter=iter,
warmup=warmup,
seed=seed,
chains=chains)
}else if(random=="frailty"){
ll_frail <- "
// generated with brms 2.21.0
functions {
}
data {
int<lower=1> N;  // total number of observations
vector[N] Y;  // response variable
array[N] int<lower=-1,upper=2> cens;  // indicates censoring
int<lower=1> K;  // number of population-level effects
matrix[N, K] X;  // population-level design matrix
int<lower=1> Kc;  // number of population-level effects after centering
// data for group-level effects of ID 1
int<lower=1> N_1;  // number of grouping levels
int<lower=1> M_1;  // number of coefficients per level
array[N] int<lower=1> J_1;  // grouping indicator per observation
// group-level predictor values
vector[N] Z_1_1;
int prior_only;  // should the likelihood be ignored?
}
transformed data {
matrix[N, Kc] Xc;  // centered version of X without an intercept
vector[Kc] means_X;  // column means of X before centering
for (i in 2:K) {
means_X[i - 1] = mean(X[, i]);
Xc[, i - 1] = X[, i] - means_X[i - 1];
}
}
parameters {
vector[Kc] b;  // regression coefficients
real Intercept;  // temporary intercept for centered predictors
real<lower=1> shape;  // shape parameter
vector<lower=0>[M_1] sd_1;  // group-level standard deviations
vector<lower=0>[N_1] v;
}
transformed parameters {
real lprior = 0;  // prior contributions to the log posterior
lprior += student_t_lpdf(Intercept | 3, 5.3, 2.5);
lprior += gamma_lpdf(shape | 0.01, 0.01);
}
model {
v~gamma(1/sd_1[1],1/sd_1[1]);
// likelihood including constants
if (!prior_only) {
// initialize linear predictor term
vector[N] mu = rep_vector(0.0, N);
mu += Intercept + Xc * b;
mu = exp(mu);
for (n in 1:N) {
// add more terms to the linear predictor
mu[n] = mu[n]*v[J_1[n]] ;
}
for (n in 1:N) {
// special treatment of censored data
if (cens[n] == 0) {
target += loglogistic_lpdf(Y[n] | mu[n], shape)+log(v[J_1[n]])+(v[J_1[n]]-1)*log(1-loglogistic_cdf(Y[n] | mu[n], shape));
} else if (cens[n] == 1) {
target += v[J_1[n]]*log(1-loglogistic_cdf(Y[n] | mu[n], shape));
}
}
}
// priors including constants
target += lprior;
}
generated quantities {
// actual population-level intercept
real b_Intercept = Intercept - dot_product(means_X, b);
vector[N] log_lik;
vector[N] mu = rep_vector(0.0, N);
mu += Intercept + Xc * b;
mu = exp(mu);
for (n in 1:N) {
// special treatment of censored data
if (cens[n] == 0) {
log_lik[n] = loglogistic_lpdf(Y[n] | mu[n], shape)+log(v[J_1[n]])+(v[J_1[n]]-1)*log(1-loglogistic_cdf(Y[n] | mu[n], shape));
} else if (cens[n] == 1) {
log_lik[n] = v[J_1[n]]*log(1-loglogistic_cdf(Y[n] | mu[n], shape));
}
}
}
"
base::cat(crayon::red("Compiling Stan program...\n"))
ll_frail_model <- rstan::stan_model(model_code = ll_frail)
base::cat(red("Start sampling \n"))
x <- rstan::sampling(ll_frail_model,
data=sdat,
iter=iter,
warmup=warmup,
seed=seed,
chains=chains)
}
}else{
stop("'family' variable must be set to 'exponential', 'Weibull', 'log-normal', 'log-logistic'.")
}
post_sample <- brms::as_draws_matrix(x)
cname <- colnames(post_sample)
n_var <- 1 + length(var) # intercept + covariate
cname[1:n_var] <- paste("b_", c("intercept", var), sep="")
if(family!="exponential"){
n_var <- n_var + 1 # shape or sigma
}
if(random=="normal" | random=="frailty"){
n_var <- n_var + 1
if(brms::is.brmsfit(x)){
cname[n_var-1] <- base::paste("sd_", rvar, sep="")
}else{
cname[n_var] <- base::paste("sd_", rvar, sep="")
}
n_r <- base::length(base::unique(data[,rvar]))
cname[n_var+1:n_r] <- base::paste("sd_", rvar, "[", base::sort(base::unique(data[,rvar])), "]", sep="")
}else{
n_r <- 0
}
post_sample <- post_sample[,1:(n_var+n_r)]
if(!brms::is.brmsfit(x)){
if(random=="fixed"){
post_sample <- post_sample[,1:n_var]
}else{
post_sample <- post_sample[,c(length(var)+1, 1:length(var), (length(var)+2):n_var, n_var+1:n_r)]
}
}
colnames(post_sample) <- cname[1:(n_var+n_r)]
x_loo <- loo::loo(x)
if(brms::is.brmsfit(x)){
x_waic <- brms::waic(x)
}else{
x_waic <- loo::waic(loo::extract_log_lik(x))
}
return(list(fit=x, post_sample=post_sample, loo=x_loo, waic=x_waic))
}
x00 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x01 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="normal", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x02 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x10 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="Weibull", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x11 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="Weibull", random="normal", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x12 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="Weibull", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x20 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-normal", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x21 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-normal", random="normal", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x22 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-normal", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x30 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x31 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="normal", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x32 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x30$post_sample
devtools::clean_dll()
devtools::document()
packageVersion("crayon")
devtools::document()
devtools::document()
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
devtools::document()
devtools::document()
install.packages("Rcpp")
install.packages("Rcpp")
devtools::document()
library(rmstBayespara)
library(rmstBayespara)
x00 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
library(spBayesSurv)
data(LeukSurv)
dat<-LeukSurv
dat$status<-dat$cens
dat$arm[dat$age>=65]<-"Greater than or equal to 65 years old"
dat$arm[dat$age<65]<-"Less than 65 years old"
x00 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x32 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
devtools::document()
library(rmstBayespara)
library(spBayesSurv)
data(LeukSurv)
dat<-LeukSurv
dat$status<-dat$cens
dat$arm[dat$age>=65]<-"Greater than or equal to 65 years old"
dat$arm[dat$age<65]<-"Less than 65 years old"
x32 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="frailty", data=dat,
iter=100, warmup=30, seed=1, chains=1)
x31 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="log-logistic", random="normal", data=dat,
iter=100, warmup=30, seed=1, chains=1)
library(rmstBayespara)
library(rmstBayespara)
packageVersion("Rcpp")
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
rhub::rhub_check()
rhub::rhub_check()
library(rmstBayespara)
library(rmstBayespara)
devtools::document()
getDLLRegisteredRoutines.DLLInfo()
devdools::document()
devtools::document()
getwd()
library(rmstBayespara)
devtools::document()
devtools::document()
packageVersion("rstan")
packageVersion("brms")
remove.packages("rstan")
remove.packages("brms")
install.packages("rstan")
install.packages("rstan")
install.packages("brms")
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
library(rmstBayespara)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
packageVersion("Rcpp")
devtools::document()
devtools::document()
.Last.error
devtools::document()
devtools::document()
devtools::document()
rhub::rhub_setup()
rhub::rhub_doctor()
attachment::att_amend_desc()
library(attachment)
install.packages("attachment")
attachment::att_amend_desc()
devtools::test()
devtools::run_examples()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
d <- data.frame(time=1:100,
status=sample(0:1, size=100, replace=TRUE),
arm=sample(c("t", "c"), size=100, replace=TRUE),
sex=sample(1:2, size=100, replace=TRUE),
district=sample(1:5, size=100, replace=TRUE)
)
fit_x_r <- brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="frailty")
fit_x_r
fit_x_r$fit
length(fit_x_r$fit[1,])
length(fit_x_r$fit)
length(fit_x_r$post_sample[,1])
fit_x <- brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="weibull", random="frailty")
fitx
fit_x
test_that(desc="Error: ", {
fit_x <- brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="weibull", random="frailty")
expect_error("'family' variable must be set to 'exponential', 'Weibull', 'log-normal', 'log-logistic'.")
})
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="weibull", random="frailty"),
"'family' variable must be set to 'exponential', 'Weibull', 'log-normal', 'log-logistic'.")
test_that(desc="Error: ", {
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="weibull", random="frailty"),
"'family' variable must be set to 'exponential', 'Weibull', 'log-normal', 'log-logistic'.")
})
brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="abc")
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
test_that(dec="Error: random", {
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="abc"),
"'random' variable must be set to 'fixed', 'normal', or 'frailty'.")
})
test_that(desc="Error: family", {
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="weibull", random="frailty"),
"'family' variable must be set to 'exponential', 'Weibull', 'log-normal', 'log-logistic'.")
})
brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="abc")
test_that(dec="Error: random", {
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="abc"),
"'random' variable must be set to 'fixed', 'normal', or 'frailty'.")
})
test_that(desc="Error: random", {
expect_error(brm_surv(time="time", cnsr="1-status",
var=c("factor(arm)", "factor(sex)"),
rvar="district", data=d,
family="Weibull", random="abc"),
"'random' variable must be set to 'fixed', 'normal', or 'frailty'.")
})
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
checkhelper::find_missing_tags()
install.packages("checkhelper")
install.packages("checkhelper")
checkhelper::find_missing_tags()
spelling::spell_check_package()
urlchecker::url_check()
urlchecker::url_update()
devtools::check_rhub()
rhub::check_on_windows(check_args = "--force-multiarch")
rhub::rhub_check()
rhub::rhub_check()
devtools::document()
rhub::rhub_check()
devtools::document()
library(rmstBayespara)
rhub::rhub_check()
rhub::rhub_check()
devtools::document()
library(rmstBayespara)
getwd()
library(spBayesSurv)
library(rstan)
library(brms)
library(loo)
data(LeukSurv)
dat<-LeukSurv
dat$status<-dat$cens
dat$arm[dat$age>=65]<-"Greater than or equal to 65 years old"
dat$arm[dat$age<65]<-"Less than 65 years old"
x00 <- brm_surv(time="time", cnsr="1-status", var="arm", rvar="district", family="exponential", random="fixed", data=dat,
iter=100, warmup=30, seed=1, chains=1)
# sample from Kojima-san's code.
fit_x_f <- brm_surv(time="time", cnsr="1-status", var=c("factor(arm)", "factor(sex)"), rvar="district", data=d, family="Weibull", random="frailty")
# sample from Kojima-san's code.
fit_x_f <- brm_surv(time="time", cnsr="1-status", var=c("factor(arm)", "factor(sex)"), rvar="district", data=dat, family="Weibull", random="frailty")
fit_x_f$fit
fit_x_f$post_sample
fit_x_f$waic
fit_x_f$loo
rmst_diff_x_f_1<-as.numeric(rmstpara(tau=100, var=ps_x_f[,"b_intercept"]+ps_x_f[,"b_factor(arm)"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty")-rmstpara(tau=100, var=ps_x_f[,"b_intercept"], shape=ps_x_f[,"shape"], frai=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty"))
ps_x_f<-fit_x_f$post_sample
rmst_diff_x_f_1<-as.numeric(rmstpara(tau=100, var=ps_x_f[,"b_intercept"]+ps_x_f[,"b_factor(arm)"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty")-rmstpara(tau=100, var=ps_x_f[,"b_intercept"], shape=ps_x_f[,"shape"], frai=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty"))
rmst_diff_x_f_1<-as.numeric(rmstpara(tau=100, var=ps_x_f[,"b_intercept"]+ps_x_f[,"b_factor(arm)"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty")-rmstpara(tau=100, var=ps_x_f[,"b_intercept"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[1]"], family="Weibull",random="frailty"))
c(summary(rmst_diff_x_f_1),quantile(rmst_diff_x_f_1,c(0.025,0.975)))
rmst_diff_x_f_2<-as.numeric(rmstpara(tau=100, var=ps_x_f[,"b_intercept"]+ps_x_f[,"b_factor(arm)"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[16]"], family="Weibull",random="frailty")-rmstpara(tau=100, var=ps_x_f[,"b_intercept"], shape=ps_x_f[,"shape"], rvar=ps_x_f[,"sd_district[16]"], family="Weibull",random="frailty"))
c(summary(rmst_diff_x_f_2),quantile(rmst_diff_x_f_2,c(0.025,0.975)))
devtools::document()
library(rmstBayespara)
install.packages("available")
available::available("rmstBayespara")
rhub::rhub_check()
devtools::document()
library(rmstBayespara)
devtools::document()
rhub::rhub_check()
devtools::document()
library(rmstBayespara)
devtools::document()
devtools::document()
library(rmstBayespara)
rhub::rhub_check()
rhub::rhub_check()
results <- rhub::rhub_check()
results
result <- rhub::check_for_cran()
rhub::rhub_platforms()
rhub::rhub_platforms() -> x
x
x[1]
print(x[2])
print(x[1])
print(x[1], n=24)
devtools::document()
library(rmstBayespara)
rhub::rhub_check()
devtools::document()
library(rmstBayespara)
help("brm_surv")
help("rmstpara")
rhub::rhub_check()
devtools::document()
devtools::document()
library(rmstBayespara)
packageVersion("rstan")
packageVersion("StanHeaders")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("keisuke-hanada/rmstBayespara")
remove.packages("rmstBayespara")
devtools::install_github("keisuke-hanada/rmstBayespara")
library(rmstBayespara)
devtools::install_github("keisuke-hanada/rmstBayespara")
library(rmstBayespara)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
example(brm_surv)
library(rmstBayespara)
example(brm_surv)
example("brm_surv")
help(brm_surv)
devtools::document()
library(rmstBayespara)
library(rmstBayespara)
library(rmstBayespara)
devtools::document()
library(rmstBayespara)
devtools::run_examples()
library(rmstBayespara)
help("brm_surv")
help("rmstpara")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rhub::rhub_check()
devtools::check_mac_release()
devtools::document()
rhub::rhub_check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
help("cens")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
interactive()
devtools::document()
devtools::document()
