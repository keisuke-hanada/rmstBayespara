// Generated by rstantools.  Do not edit by hand.

/*
    rmstBayespara is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmstBayespara is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmstBayespara.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_loglogistic_frail_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 72> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 28, column 2 to column 15)",
  " (in 'string', line 29, column 2 to column 17)",
  " (in 'string', line 30, column 2 to column 22)",
  " (in 'string', line 31, column 2 to column 28)",
  " (in 'string', line 32, column 2 to column 25)",
  " (in 'string', line 35, column 2 to column 18)",
  " (in 'string', line 65, column 2 to column 57)",
  " (in 'string', line 66, column 2 to column 20)",
  " (in 'string', line 67, column 2 to column 36)",
  " (in 'string', line 36, column 2 to column 52)",
  " (in 'string', line 37, column 2 to column 43)",
  " (in 'string', line 68, column 2 to column 27)",
  " (in 'string', line 69, column 2 to column 15)",
  " (in 'string', line 75, column 8 to column 75)",
  " (in 'string', line 74, column 31 to line 76, column 7)",
  " (in 'string', line 74, column 13 to line 76, column 7)",
  " (in 'string', line 73, column 8 to column 132)",
  " (in 'string', line 72, column 24 to line 74, column 7)",
  " (in 'string', line 72, column 6 to line 76, column 7)",
  " (in 'string', line 70, column 17 to line 77, column 3)",
  " (in 'string', line 70, column 2 to line 77, column 3)",
  " (in 'string', line 40, column 2 to column 31)",
  " (in 'string', line 44, column 11 to column 12)",
  " (in 'string', line 44, column 4 to column 38)",
  " (in 'string', line 45, column 4 to column 29)",
  " (in 'string', line 46, column 4 to column 17)",
  " (in 'string', line 49, column 6 to column 31)",
  " (in 'string', line 47, column 19 to line 50, column 5)",
  " (in 'string', line 47, column 4 to line 50, column 5)",
  " (in 'string', line 56, column 8 to column 72)",
  " (in 'string', line 55, column 31 to line 57, column 7)",
  " (in 'string', line 55, column 13 to line 57, column 7)",
  " (in 'string', line 54, column 8 to column 129)",
  " (in 'string', line 53, column 24 to line 55, column 7)",
  " (in 'string', line 53, column 6 to line 57, column 7)",
  " (in 'string', line 51, column 19 to line 58, column 5)",
  " (in 'string', line 51, column 4 to line 58, column 5)",
  " (in 'string', line 42, column 19 to line 59, column 3)",
  " (in 'string', line 42, column 2 to line 59, column 3)",
  " (in 'string', line 61, column 2 to column 19)",
  " (in 'string', line 5, column 2 to column 17)",
  " (in 'string', line 6, column 9 to column 10)",
  " (in 'string', line 6, column 2 to column 14)",
  " (in 'string', line 7, column 8 to column 9)",
  " (in 'string', line 7, column 2 to column 38)",
  " (in 'string', line 8, column 2 to column 17)",
  " (in 'string', line 9, column 9 to column 10)",
  " (in 'string', line 9, column 12 to column 13)",
  " (in 'string', line 9, column 2 to column 17)",
  " (in 'string', line 10, column 2 to column 18)",
  " (in 'string', line 12, column 2 to column 19)",
  " (in 'string', line 13, column 2 to column 19)",
  " (in 'string', line 14, column 8 to column 9)",
  " (in 'string', line 14, column 2 to column 28)",
  " (in 'string', line 16, column 9 to column 10)",
  " (in 'string', line 16, column 2 to column 18)",
  " (in 'string', line 17, column 2 to column 17)",
  " (in 'string', line 20, column 9 to column 10)",
  " (in 'string', line 20, column 12 to column 14)",
  " (in 'string', line 20, column 2 to column 19)",
  " (in 'string', line 21, column 9 to column 11)",
  " (in 'string', line 21, column 2 to column 21)",
  " (in 'string', line 23, column 4 to column 34)",
  " (in 'string', line 24, column 4 to column 42)",
  " (in 'string', line 22, column 17 to line 25, column 3)",
  " (in 'string', line 22, column 2 to line 25, column 3)",
  " (in 'string', line 28, column 9 to column 11)",
  " (in 'string', line 31, column 18 to column 21)",
  " (in 'string', line 32, column 18 to column 21)",
  " (in 'string', line 66, column 9 to column 10)",
  " (in 'string', line 67, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_loglogistic_frail final : public model_base_crtp<model_loglogistic_frail> {
private:
  int N;
  Eigen::Matrix<double,-1,1> Y_data__;
  std::vector<int> cens;
  int K;
  Eigen::Matrix<double,-1,-1> X_data__;
  int Kc;
  int N_1;
  int M_1;
  std::vector<int> J_1;
  Eigen::Matrix<double,-1,1> Z_1_1_data__;
  int prior_only;
  Eigen::Matrix<double,-1,-1> Xc_data__;
  Eigen::Matrix<double,-1,1> means_X_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> Z_1_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Xc{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> means_X{nullptr, 0};
public:
  ~model_loglogistic_frail() {}
  model_loglogistic_frail(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_loglogistic_frail_namespace::model_loglogistic_frail";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 41;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 41;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 43;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 43;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 43;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      stan::math::validate_non_negative_index("cens", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "cens", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      cens = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 45;
      cens = context__.vals_i("cens");
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "cens", cens, -1);
      current_statement__ = 45;
      stan::math::check_less_or_equal(function__, "cens", cens, 2);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 46;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 49;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 49;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 49;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 49;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 50;
      context__.validate_dims("data initialization", "Kc", "int",
        std::vector<size_t>{});
      Kc = std::numeric_limits<int>::min();
      current_statement__ = 50;
      Kc = context__.vals_i("Kc")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "Kc", Kc, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "N_1", "int",
        std::vector<size_t>{});
      N_1 = std::numeric_limits<int>::min();
      current_statement__ = 51;
      N_1 = context__.vals_i("N_1")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "N_1", N_1, 1);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "M_1", "int",
        std::vector<size_t>{});
      M_1 = std::numeric_limits<int>::min();
      current_statement__ = 52;
      M_1 = context__.vals_i("M_1")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "M_1", M_1, 1);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("J_1", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "J_1", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      J_1 = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 54;
      J_1 = context__.vals_i("J_1");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "J_1", J_1, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("Z_1_1", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "Z_1_1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Z_1_1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&Z_1_1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(Z_1_1_data__.data(), N);
      {
        std::vector<local_scalar_t__> Z_1_1_flat__;
        current_statement__ = 56;
        Z_1_1_flat__ = context__.vals_r("Z_1_1");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(Z_1_1, Z_1_1_flat__[(pos__ - 1)],
            "assigning variable Z_1_1", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 57;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 58;
      stan::math::validate_non_negative_index("Xc", "N", N);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("Xc", "Kc", Kc);
      current_statement__ = 60;
      Xc_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, Kc,
                    std::numeric_limits<double>::quiet_NaN());
      new (&Xc) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Xc_data__.data(), N,
        Kc);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("means_X", "Kc", Kc);
      current_statement__ = 62;
      means_X_data__ = Eigen::Matrix<double,-1,1>::Constant(Kc,
                         std::numeric_limits<double>::quiet_NaN());
      new (&means_X)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(means_X_data__.data(), Kc);
      current_statement__ = 66;
      for (int i = 2; i <= K; ++i) {
        current_statement__ = 63;
        stan::model::assign(means_X,
          stan::math::mean(
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(i))), "assigning variable means_X",
          stan::model::index_uni((i - 1)));
        current_statement__ = 64;
        stan::model::assign(Xc,
          stan::math::subtract(
            stan::model::rvalue(X, "X", stan::model::index_omni(),
              stan::model::index_uni(i)),
            stan::model::rvalue(means_X, "means_X",
              stan::model::index_uni((i - 1)))), "assigning variable Xc",
          stan::model::index_omni(), stan::model::index_uni((i - 1)));
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("b", "Kc", Kc);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("sd_1", "M_1", M_1);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("v", "N_1", N_1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("mu", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = Kc + 1 + 1 + M_1 + N_1;
  }
  inline std::string model_name() const final {
    return "model_loglogistic_frail";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_loglogistic_frail_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 1;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc);
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 2;
      Intercept = in__.template read<local_scalar_t__>();
      local_scalar_t__ shape = DUMMY_VAR__;
      current_statement__ = 3;
      shape = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_1, DUMMY_VAR__);
      current_statement__ = 4;
      sd_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               M_1);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_1, DUMMY_VAR__);
      current_statement__ = 5;
      v = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N_1);
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 6;
      lprior = 0;
      current_statement__ = 10;
      lprior = (lprior +
        stan::math::student_t_lpdf<false>(Intercept, 3, 5.3, 2.5));
      current_statement__ = 11;
      lprior = (lprior + stan::math::gamma_lpdf<false>(shape, 0.01, 0.01));
      {
        current_statement__ = 22;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(v, (1 /
                         stan::model::rvalue(sd_1, "sd_1",
                           stan::model::index_uni(1))), (1 /
                         stan::model::rvalue(sd_1, "sd_1",
                           stan::model::index_uni(1)))));
        current_statement__ = 39;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 23;
          stan::math::validate_non_negative_index("mu", "N", N);
          Eigen::Matrix<local_scalar_t__,-1,1> mu =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
          current_statement__ = 24;
          stan::model::assign(mu, stan::math::rep_vector(0.0, N),
            "assigning variable mu");
          current_statement__ = 25;
          stan::model::assign(mu,
            stan::math::add(stan::model::deep_copy(mu),
              stan::math::add(Intercept, stan::math::multiply(Xc, b))),
            "assigning variable mu");
          current_statement__ = 26;
          stan::model::assign(mu,
            stan::math::exp(stan::model::deep_copy(mu)),
            "assigning variable mu");
          current_statement__ = 29;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 27;
            stan::model::assign(mu,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(n)) *
              stan::model::rvalue(v, "v",
                stan::model::index_uni(
                  stan::model::rvalue(J_1, "J_1", stan::model::index_uni(n))))),
              "assigning variable mu", stan::model::index_uni(n));
          }
          current_statement__ = 37;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 35;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cens, "cens", stan::model::index_uni(n)),
                  0)) {
              current_statement__ = 33;
              lp_accum__.add(((stan::math::loglogistic_lpdf<false>(
                                 stan::model::rvalue(Y, "Y",
                                   stan::model::index_uni(n)),
                                 stan::model::rvalue(mu, "mu",
                                   stan::model::index_uni(n)), shape) +
                stan::math::log(
                  stan::model::rvalue(v, "v",
                    stan::model::index_uni(
                      stan::model::rvalue(J_1, "J_1",
                        stan::model::index_uni(n)))))) +
                ((stan::model::rvalue(v, "v",
                    stan::model::index_uni(
                      stan::model::rvalue(J_1, "J_1",
                        stan::model::index_uni(n)))) - 1) *
                stan::math::log((1 -
                  stan::math::loglogistic_cdf(
                    stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                    shape))))));
            } else {
              current_statement__ = 32;
              if (stan::math::logical_eq(
                    stan::model::rvalue(cens, "cens",
                      stan::model::index_uni(n)), 1)) {
                current_statement__ = 30;
                lp_accum__.add((stan::model::rvalue(v, "v",
                                  stan::model::index_uni(
                                    stan::model::rvalue(J_1, "J_1",
                                      stan::model::index_uni(n)))) *
                  stan::math::log((1 -
                    stan::math::loglogistic_cdf(
                      stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                      stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                      shape)))));
              }
            }
          }
        }
        current_statement__ = 40;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_loglogistic_frail_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(Kc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc);
      double Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Intercept = in__.template read<local_scalar_t__>();
      double shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      shape = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(1, lp__);
      Eigen::Matrix<double,-1,1> sd_1 =
        Eigen::Matrix<double,-1,1>::Constant(M_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sd_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               M_1);
      Eigen::Matrix<double,-1,1> v =
        Eigen::Matrix<double,-1,1>::Constant(N_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      v = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, N_1);
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(b);
      out__.write(Intercept);
      out__.write(shape);
      out__.write(sd_1);
      out__.write(v);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      lprior = 0;
      current_statement__ = 10;
      lprior = (lprior +
        stan::math::student_t_lpdf<false>(Intercept, 3, 5.3, 2.5));
      current_statement__ = 11;
      lprior = (lprior + stan::math::gamma_lpdf<false>(shape, 0.01, 0.01));
      if (emit_transformed_parameters__) {
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double b_Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      b_Intercept = (Intercept - stan::math::dot_product(means_X, b));
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      stan::model::assign(mu, stan::math::rep_vector(0.0, N),
        "assigning variable mu");
      current_statement__ = 12;
      stan::model::assign(mu,
        stan::math::add(stan::model::deep_copy(mu),
          stan::math::add(Intercept, stan::math::multiply(Xc, b))),
        "assigning variable mu");
      current_statement__ = 13;
      stan::model::assign(mu, stan::math::exp(stan::model::deep_copy(mu)),
        "assigning variable mu");
      current_statement__ = 21;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 19;
        if (stan::math::logical_eq(
              stan::model::rvalue(cens, "cens", stan::model::index_uni(n)), 0)) {
          current_statement__ = 17;
          stan::model::assign(log_lik,
            ((stan::math::loglogistic_lpdf<false>(
                stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                shape) +
            stan::math::log(
              stan::model::rvalue(v, "v",
                stan::model::index_uni(
                  stan::model::rvalue(J_1, "J_1", stan::model::index_uni(n))))))
            +
            ((stan::model::rvalue(v, "v",
                stan::model::index_uni(
                  stan::model::rvalue(J_1, "J_1", stan::model::index_uni(n))))
            - 1) *
            stan::math::log((1 -
              stan::math::loglogistic_cdf(
                stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                shape))))), "assigning variable log_lik",
            stan::model::index_uni(n));
        } else {
          current_statement__ = 16;
          if (stan::math::logical_eq(
                stan::model::rvalue(cens, "cens", stan::model::index_uni(n)),
                1)) {
            current_statement__ = 14;
            stan::model::assign(log_lik,
              (stan::model::rvalue(v, "v",
                 stan::model::index_uni(
                   stan::model::rvalue(J_1, "J_1", stan::model::index_uni(n))))
              *
              stan::math::log((1 -
                stan::math::loglogistic_cdf(
                  stan::model::rvalue(Y, "Y", stan::model::index_uni(n)),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(n)),
                  shape)))), "assigning variable log_lik",
              stan::model::index_uni(n));
          }
        }
      }
      out__.write(b_Intercept);
      out__.write(log_lik);
      out__.write(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Kc),
        "assigning variable b");
      out__.write(b);
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 2;
      Intercept = in__.read<local_scalar_t__>();
      out__.write(Intercept);
      local_scalar_t__ shape = DUMMY_VAR__;
      current_statement__ = 3;
      shape = in__.read<local_scalar_t__>();
      out__.write_free_lb(1, shape);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_1, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sd_1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M_1),
        "assigning variable sd_1");
      out__.write_free_lb(0, sd_1);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_1, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(v,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_1),
        "assigning variable v");
      out__.write_free_lb(0, v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(Kc)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "Intercept",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "shape", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sd_1", "double",
        std::vector<size_t>{static_cast<size_t>(M_1)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(N_1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Kc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 1;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b);
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 2;
      Intercept = context__.vals_r("Intercept")[(1 - 1)];
      out__.write(Intercept);
      local_scalar_t__ shape = DUMMY_VAR__;
      current_statement__ = 3;
      shape = context__.vals_r("shape")[(1 - 1)];
      out__.write_free_lb(1, shape);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_1_flat__;
        current_statement__ = 4;
        sd_1_flat__ = context__.vals_r("sd_1");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(sd_1, sd_1_flat__[(pos__ - 1)],
            "assigning variable sd_1", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_1);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 5;
        v_flat__ = context__.vals_r("v");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, v);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"b", "Intercept", "shape", "sd_1",
                "v"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"b_Intercept", "log_lik", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    Kc)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M_1)},
                std::vector<size_t>{static_cast<size_t>(N_1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>> temp{std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "shape");
    for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      param_names__.emplace_back(std::string() + "b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "shape");
    for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_1) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"shape\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_1) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((Kc + 1) + 1) + M_1) + N_1);
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + N) +
      N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((Kc + 1) + 1) + M_1) + N_1);
    const size_t num_transformed = emit_transformed_parameters * (1);
    const size_t num_gen_quantities = emit_generated_quantities * (((1 + N) +
      N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_loglogistic_frail_namespace::model_loglogistic_frail;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_loglogistic_frail_namespace::profiles__;
}
#endif
#endif
